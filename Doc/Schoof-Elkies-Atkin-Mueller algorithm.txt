sea c++  Schoof-Elkies-Atkin-Mueller algorithm
https://github.com/miracl/MIRACL/blob/b9b8fd471de253cfd6313446cb490741edb069a7/source/curve/sea.cpp

https://github.com/miracl/MIRACL/blob/master/source/curve/schoof.cpp

https://uwspace.uwaterloo.ca/bitstream/handle/10012/7485/Kok_YikSiong.pdf;sequence=1

https://math.mit.edu/~drew/SEArecords.html
This particular prime p was chosen simply because it happens to be the least prime with more than 5000 digits that appears on this list of proven primes. (Update: as kindly pointed out to me by David Broadhurst, there are many smaller proven primes with more than 5000 digits, which you can find using this handy search page). No special properties of the prime p were used in the computation.

This computation was performed on 8 computers working in parallel (3.0 GHz AMD Phenom II, 4 cores each), 
and took about 6 weeks (1378 CPU days). 
This figure includes the time required to compute all of the (instantiated) modular polynomials that were used, as initially described in Genus 1 point counting in quadratic space and essentially quartic time and published in On the evaluation of modular polynomials (please cite the paper when citing this result). A rough breakdown of the running time is given below:
https://hal.inria.fr/inria-00001009/en/
Genus 1 point counting over prime fields

July 7, 2010

The number of points on the elliptic curve E defined by the equation

      y2 = x3 + 2718281828X + 3141592653,

modulo the prime p=16219299585*216612 − 1 is p+1−t, where the Frobenius trace t is the integer

−205676009405629562870723544951711978493769633522691001290342982824394579979020\
4959592275407252503375130973581475034324335091578303659602898092961951903564756\
9198933574237708567449417804544527593253489171272835036914287573195186259060507\
9378051967142239957124811271733862496681523052872100104674708907819012461473325\
1721212562552160555172655862716920841284900275128560059998430399307232130155235\
4770318037680806930569295989240725111217683349520179828098497727732803344520638\
0645027334602616814059068320663621699856598219760976692643576278752947430140491\
6595475629667874243634018488586052345598505206569111319389909915321869347167949\
3155868676978108334106790272982037127662933425771749796702645059239637511409201\
5289220525350785051281761320333589438348416068558542547465060916278320139630744\
2907319563523368372624948591596206702163789435318699775791048148955678435878742\
1897666214061826149830661747871603324711207139815142803476791860168691157478407\
2003315890189110872897596116422007228911474320208862334504162336413864836736210\
5359715444909805319838607670493175621868405897718758574258106867910177145843538\
0874391942946098290760561460645783184379042763328777066300543506565157925043754\
3611837824244725809922762112549137228504010076069580209346876604348239136238425\
8118394715018207836019464687487606402936418324093917766417210216541895677571152\
6763272193305850435146386442265129449541112284818987192814321299484336893724691\
2741334009664482781230858923491788181119189054650310889869900858629974659408913\
4428483925169564746537782964488059752941315320933387528426715619831817515485624\
4734335275132494621001952446852583583199264754496938732527393372326375034790053\
4081899583099725646921295752447566660037903173384929003015921757772295870375676\
8925317990125300911646115088717717639105382789821458209896785394362925921805561\
8911632548625725986031204760147307727593699728775128379092168271121767274773752\
5964246646239976448378614270245272134687309907284961938608669237187423020635746\
6899619292842753118560048311852205009216761760201957318038204119623750508007193\
6406702382528439958955208274496842320127279061845291668832974850434817931979782\
7570511372607343605964113472504605104937216247772767586484941749269032791114761\
4095896400156814109886322639484738661356630416026575898292621971967626230086181\
2490242979836754266268188351661135061847887688824809576465291476689413020982267\
7706160197656271121723717447557022758725420893727752776926667115368323484986502\
6489506952739429390868342254983967258910337922712336904912


https://arxiv.org/abs/2004.10189
https://arxiv.org/pdf/2004.10189.pdf
Counting points on superelliptic curves in average polynomial time
Andrew V. Sutherland

    We describe the practical implementation of an average polynomial-time algorithm for counting points on superelliptic curves 
    defined over Q that is substantially faster than previous approaches. 
    Our algorithm takes as input a superelliptic curves ym=f(x) with m≥2 and f∈Z[x] any squarefree polynomial of degree d≥3, 
    along with a positive integer N. It can compute #X(Fp) for all p≤N not dividing mlc(f)disc(f) in time O(md3Nlog3NloglogN). It achieves this by computing the trace of the Cartier--Manin matrix of reductions of X. We can also compute the Cartier--Manin matrix itself, which determines the p-rank of the Jacobian of X and the numerator of its zeta function modulo~p. 
    
--------------------------------------------
Hyperelliptic curve cryptography
https://github.com/syncom/libg2hec
https://github.com/anang0g0/Hyperelliptic-DLP