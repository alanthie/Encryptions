// 	LINKER -lcurl
// 	Post builds
//		cp /home/server/dev/Encryptions/bin/Release/crypto /home/server/dev/Encryptions/Exec_Linux/crypto
//		copy x64\Release\crypto.exe ..\..\Exec_Windows\*


// Git restore tool: gitk --all --date-order $(git log -g --pretty=%H)

ecc
https://www.youtube.com/watch?v=wpLQZhqdPaA

https://cryptobook.nakov.com/asymmetric-key-ciphers/elliptic-curve-cryptography-ecc
ECC Keys
The private keys in the ECC are integers (in the range of the curve's field size, typically 256-bit integers). Example of 256-bit ECC private key (hex encoded, 32 bytes, 64 hex digits) is: 0x51897b64e85c3f714bba707e867914295a1377a7463a9dae8ea6a8b914246319.

The key generation in the ECC cryptography is as simple as securely generating a random integer in certain range, 

so it is extremely fast. Any number within the range is valid ECC private key.
The public keys in the ECC are EC points - pairs of integer coordinates {x, y}, laying on the curve. Due to their special properties, EC points can be compressed to just one coordinate + 1 bit (odd or even). Thus the compressed public key, corresponding to a 256-bit ECC private key, is a 257-bit integer. Example of ECC public key (corresponding to the above private key, encoded in the Ethereum format, as hex with prefix 02 or 03) is: 0x02f54ba86dc1ccb5bed0224d23f01ed87e4a443c47fc690d7797a13d41d2340e1a. In this format the public key actually takes 33 bytes (66 hex digits), which can be optimized to exactly 257 bits.

Encryption/Decryption
https://cryptobook.nakov.com/asymmetric-key-ciphers/ecc-encryption-decryption
=>https://www.youtube.com/watch?v=dhJX9kktijo
Encryption
k random
Encode Message=>Pm on EC
Cipher point = Cm = [kG, Pm + kPb] kPb=kG*Nb

Decryption
Pm+kG*Nb-kG*Nb = Pm
Pm = Cm[y]-Cm[x]*Nb

file:///home/server/Downloads/SE-Enc_A_Secure_and_Efficient_Encoding_Scheme_Usin.pdf
